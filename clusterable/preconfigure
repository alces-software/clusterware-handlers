#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

main() {
    # Bail out if we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/cluster" ]; then
        exit 0
    fi

    # Bail out if we can't locate the config file
    if [ ! -f "${cw_ROOT}/etc/config.yml" ]; then
        exit 1
    fi

    # Parse YAML file into something useful
    mkdir -p "${cw_ROOT}/etc/config/cluster/serf"
    ruby_run <<RUBY
require 'yaml'
require 'json'

def write_file(name, content)
  File.write("${cw_ROOT}/etc/config/cluster/#{name}",content)
end

config = YAML.load_file('${cw_ROOT}/etc/config.yml')['cluster']

if config['master']
  h = { retry_join: [config['master']] }
  write_file('serf/join.json', h.to_json)
end

h = { discover: config['uuid'] }
write_file('serf/cluster.json', h.to_json)

if config['interface']
  h = { interface: config['interface'] }
  write_file('serf/interface.json', h.to_json)
end

tags = config['tags'] || {}
h = { tags: tags.merge({ role: config['role'] }) }
write_file('serf/tags.json', h.to_json)

cluster_vars = []
cluster_vars << %(cw_CLUSTER_uuid="#{config['uuid']}")
if config['master']
  cluster_vars << %(cw_CLUSTER_master="#{config['master']}")
end
if config['name']
  cluster_vars << %(cw_CLUSTER_name="#{config['name']}")
end
if config['interface']
  cluster_vars << %(cw_CLUSTER_iface="#{config['interface']}")
end
cluster_vars << %(cw_CLUSTER_quorum="#{config['quorum'] || 1}")
cluster_vars << %(cw_CLUSTER_service_url="#{config['service_url']}")
write_file('cluster.vars.sh', cluster_vars.join("\n"))

instance_vars = []
instance_vars << %(cw_INSTANCE_role="#{config['role']}")
instance_vars << %(cw_INSTANCE_log="#{config['log'] || '/var/log/clusterware/instance.log'}")
tags.each do |k,v|
  instance_vars << %(cw_INSTANCE_tag_#{k.upcase}="#{v}")
end
write_file('instance.vars.sh', instance_vars.join("\n"))
RUBY

    cp "${cw_ROOT}/etc/config/cluster/serf"/*.json "${cw_ROOT}/etc/serf"

    if [ -f "${cw_ROOT}"/etc/genders ]; then
        . "${cw_ROOT}"/etc/config/cluster/instance.vars.sh
        if [ "${cw_INSTANCE_role}" == "master" ]; then
            short_name="$(hostname -s)"
            if ! grep -q "^${short_name}" "${cw_ROOT}"/etc/genders; then
                echo "${short_name} master,masters,cluster,all" >> "${cw_ROOT}"/etc/genders
            fi
        fi
    fi

    iptables -I INPUT -p tcp --dport 7946 -j ACCEPT
    iptables -I INPUT -p udp --dport 7946 -j ACCEPT
}

setup

require ruby
require distro
require handler

handler_tee main "$@"
