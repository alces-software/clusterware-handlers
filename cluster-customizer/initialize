#!/bin/bash
#==============================================================================
# Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_run_initialize_hooks() {
    local paths p args a
    paths="${cw_CLUSTER_CUSTOMIZER_custom_paths}"
    for p in ${cw_CLUSTER_CUSTOMIZER_path}/*; do
        paths="${paths} ${p}"
    done
    for p in ${paths}; do
        if [ -d "${p}"/initialize.d ]; then
            args=()
            if [ ! -d "${cw_ROOT}"/etc/config ]; then
                args+=(once)
            fi
            for a in "${p}"/initialize.d/*; do
                if [ -x "$a" -a ! -d "$a" ] && [[ "$a" != *~ ]]; then
                    echo "Running initialize hook: ${a}"
                    "${a}" "initialize" "${args[@]}"
                elif [[ "$a" != *~ ]]; then
                    echo "Skipping non-executable initialize hook: ${a}"
                fi
            done
        else
            echo "No initialize hooks found in ${p}"
        fi
    done
}

_setup_features() {
    local o_features feature_data o_set feature_set
    feature_data="$1"

    o_features="${cw_CLUSTER_CUSTOMIZER_features}"
    o_set="${cw_CLUSTER_CUSTOMIZER_feature_set}"

    feature_set=$(echo "${feature_data}" | cut -f2 -d' ')
    if [[ "${feature_set}" == "("*")" ]]; then
        feature_set="${feature_set%)}"
        feature_set="${feature_set#(}"
        cw_CLUSTER_CUSTOMIZER_features=$(echo "${feature_data}" | cut -f3- -d' ')
    else
        cw_CLUSTER_CUSTOMIZER_features=$(echo "${feature_data}" | cut -f2- -d' ')
    fi
    cw_CLUSTER_CUSTOMIZER_feature_set="${feature_set}"

    if [ "${cw_CLUSTER_CUSTOMIZER_features}" ]; then
        sed -i -e "s,^#\?cw_CLUSTER_CUSTOMIZER_features=.*,cw_CLUSTER_CUSTOMIZER_features=\"${cw_CLUSTER_CUSTOMIZER_features}\",g" \
            "${cw_ROOT}"/etc/cluster-customizer.rc
    else
        cw_CLUSTER_CUSTOMIZER_features="${o_features}"
    fi
    if [ "${cw_CLUSTER_CUSTOMIZER_feature_set}" ]; then
        sed -i -e "s,^#\?cw_CLUSTER_CUSTOMIZER_feature_set=.*,cw_CLUSTER_CUSTOMIZER_feature_set=\"${cw_CLUSTER_CUSTOMIZER_feature_set}\",g" \
            "${cw_ROOT}"/etc/cluster-customizer.rc
    else
        cw_CLUSTER_CUSTOMIZER_feature_set="${o_set}"
    fi
}

_setup_profiles() {
    local o_profiles o_bucket customizer_data
    customizer_data="$1"

    o_profiles="${cw_CLUSTER_CUSTOMIZER_profiles}"
    o_bucket="${cw_CLUSTER_CUSTOMIZER_bucket}"
    cw_CLUSTER_CUSTOMIZER_bucket=$(echo "${customizer_data}" | cut -f2 -d' ')
    cw_CLUSTER_CUSTOMIZER_profiles=$(echo "${customizer_data}" | cut -f3- -d' ')
    if [[ "$cw_CLUSTER_CUSTOMIZER_bucket" != "" && "$cw_CLUSTER_CUSTOMIZER_bucket" != "s3://"* ]]; then
        cw_CLUSTER_CUSTOMIZER_profiles="${cw_CLUSTER_CUSTOMIZER_bucket} ${cw_CLUSTER_CUSTOMIZER_profiles}"
        cw_CLUSTER_CUSTOMIZER_bucket=""
    fi
    if [ "${cw_CLUSTER_CUSTOMIZER_bucket}" ]; then
        sed -i -e "s,^#\?cw_CLUSTER_CUSTOMIZER_bucket=.*,cw_CLUSTER_CUSTOMIZER_bucket=\"${cw_CLUSTER_CUSTOMIZER_bucket}\",g" \
            "${cw_ROOT}"/etc/cluster-customizer.rc
    else
        cw_CLUSTER_CUSTOMIZER_bucket="${o_bucket}"
    fi
    if [ "${cw_CLUSTER_CUSTOMIZER_profiles}" ]; then
        sed -i -e "s,^#\?cw_CLUSTER_CUSTOMIZER_profiles=.*,cw_CLUSTER_CUSTOMIZER_profiles=\"${cw_CLUSTER_CUSTOMIZER_profiles}\",g" \
            "${cw_ROOT}"/etc/cluster-customizer.rc
    else
        cw_CLUSTER_CUSTOMIZER_profiles="${o_profiles}"
    fi
}

_load_master_list() {
  local master_ip retries tmpfile

  # NB ${cw_ROOT}/etc/config/cluster/config.rc doesn't exist at the point
  # this is executed - we need to extract master IP ourselves

  retries=3
  while [ $retries -gt 0 ]; do
    retries=$[$retries-1]
    if [ -f "${cw_ROOT}/etc/config.yml" ]; then break; fi
    echo "${cw_ROOT}/etc/config.yml does not yet exist, waiting 10 seconds then trying again [$retries remaining]"
    sleep 10
  done

  master_ip=$(grep -Po "(?<=master: )[0-9\.]*" ${cw_ROOT}/etc/config.yml)

  if [[ "${master_ip}" != "" ]]; then

    tmpfile="$(mktemp /tmp/cluster-customizer.XXXXXXXX)"

    mkdir -p "${cw_ROOT}/etc/cluster-customizer"

    curl -Lsf -o "${cw_ROOT}/etc/cluster-customizer/config.yml" "http://${master_ip}/customizer/config.yml"

    if [ $? == 0 ]; then
      ruby_run <<RUBY > "${tmpfile}"
require 'yaml'
master_list = YAML.load_file("${cw_ROOT}/etc/cluster-customizer/config.yml")

if master_list.key? "profiles"
  puts "cw_CLUSTER_CUSTOMIZER_master_profiles=\"#{master_list['profiles'].join(' ')}\""
end

if master_list.key? "features"
  puts "cw_CLUSTER_CUSTOMIZER_master_features=\"#{master_list['features'].join(' ')}\""
end
RUBY

      source "${tmpfile}"
      rm "${tmpfile}"
    fi
  else
    echo "No master node IP specified, not loading customizer configuration from master."
  fi
}

_setup() {
    local userdata feature_data profile_data

    userdata=$(network_fetch_ec2_userdata 1)

    _load_master_list

    feature_data=$(echo "${userdata}" | grep "^#=FlightFeatures ")
    if [ "${feature_data}" ] || [ "${cw_CLUSTER_CUSTOMIZER_master_features}" ]; then
        _setup_features "${feature_data} ${cw_CLUSTER_CUSTOMIZER_master_features}"
    fi

    profile_data=$(echo "${userdata}" | egrep "^#=Flight(Profiles|Customizer) ")
    if [ "${profile_data}" ] || [ "${cw_CLUSTER_CUSTOMIZER_master_profiles}" ]; then
        _setup_profiles "${profile_data} "${cw_CLUSTER_CUSTOMIZER_master_profiles}""
    fi
}

_wait_for_internet() {
    local c
    c=0
    while ! ping -c1 -w1 8.8.8.8 &>/dev/null; do
        c=$(($c+1))
        if [ "$c" -gt 49 ]; then
            echo "Giving up after 50 attempts."
            return 1
        fi
        echo "No access to Internet available; will retry in 5s (attempt ${c}/50)"
        sleep 5
    done
}

main() {
    if network_has_metadata_service 1; then
        _setup
    fi
    if _wait_for_internet; then
        ${_ALCES} service install s3cmd
        customize_fetch
    else
        echo "WARNING! No access to download customizations, no customization will occur."
    fi
    _run_initialize_hooks
}

setup
require handler
require files
require network
require customize
require ruby

files_load_config cluster-customizer
cw_CLUSTER_CUSTOMIZER_path="${cw_CLUSTER_CUSTOMIZER_path:-${cw_ROOT}/var/lib/customizer}"
cw_CLUSTER_CUSTOMIZER_profiles="${cw_CLUSTER_CUSTOMIZER_profiles:-default}"

_ALCES="${cw_ROOT}"/bin/alces

handler_tee main "$@"
