#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler support script
## Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################

# This file contains autoscaling functions for AWS. Function names should all
# begin with 'aws-' and provide the required interface:
# - aws-configure
# - aws-unexhausted-nodes
# - aws-shoot-node
# - aws-scale-out

setup() {
  local a xdg_config
  IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
  for a in "${xdg_config[@]}"; do
    if [ -e "${a}"/clusterware/config.vars.sh ]; then
      source "${a}"/clusterware/config.vars.sh
      break
    fi
  done
  if [ -z "${cw_ROOT}" ]; then
    echo "$0: unable to locate clusterware configuration"
    exit 1
  fi
  kernel_load

  _AWS="${cw_ROOT}"/opt/aws/bin/aws
  _JO="${cw_ROOT}"/opt/jo/bin/jo
  _ALCES="${cw_ROOT}"/bin/alces
}

_detect_autoscaling() {
    "${_AWS}" --region "${cw_INSTANCE_aws_region}" \
              autoscaling describe-auto-scaling-groups &>/dev/null
}

aws-configure() {
  local group tags

  files_load_config config config/cluster

  echo "Instance is running on EC2; configuring for autoscaling"

  # Ensure aws serviceware is installed.
  "${_ALCES}" service install aws

  if [ "${cw_INSTANCE_aws_autoscaling}" == "autodetect" ]; then
      if _detect_autoscaling; then
          echo "Autoscaling detected as enabled"
          sed -i -e 's/^cw_INSTANCE_aws_autoscaling=.*/cw_INSTANCE_aws_autoscaling=enabled/' \
              "${cw_ROOT}"/etc/config/cluster/instance-aws.rc
      else
          echo "Autoscaling detected as disabled"
          sed -i -e 's/^cw_INSTANCE_aws_autoscaling=.*/cw_INSTANCE_aws_autoscaling=disabled/' \
              "${cw_ROOT}"/etc/config/cluster/instance-aws.rc

          # We need to make the following change in both files
          sed -i -e 's/^cw_INSTANCE_autoscaling=.*/cw_INSTANCE_autoscaling=disabled/' \
              "${cw_ROOT}"/etc/config/cluster/instance.rc
          sed -i -e 's/^cw_INSTANCE_autoscaling=.*/cw_INSTANCE_autoscaling=disabled/' \
              "${cw_ROOT}"/etc/config/cluster/instance.vars.sh
      fi
  fi

  # Set serf tags containing:
  #  - instance creation time
  #  - autoscaling group name (if available)
  tags=(tags[aws_ctime]=${cw_INSTANCE_aws_ctime})

  group=$("${_AWS}" --region "${cw_INSTANCE_aws_region}" \
                    ec2 describe-tags \
                    --filters Name=resource-id,Values=${cw_INSTANCE_aws_instanceid} Name=key,Values=aws:autoscaling:groupName | \
                    grep -Po "(?<=Value\": \")[a-zA-Z0-9\-]+"
                 )
  if [ "$group" ]; then
      tags+=(tags[autoscaling_group]=${group})
      tags+=(tags[autoscaling_group_cores]=\"$(grep -c '^processor\s*: [0-9]*$' /proc/cpuinfo)\")
  fi
  echo "Setting autoscaling tags: ${tags[@]}"
  "${_JO}" "${tags[@]}" > "${cw_ROOT}"/etc/serf/tags-autoscaling.json
}

aws-unexhausted-nodes() {
  # An AWS node is "exhausted" if we've used up more than 53 minutes of its
  # billing hour.
  local node nodelist ctime
  nodelist="$*"
  for node in ${nodelist}; do
    ctime=$(member_get_member_tag "${node}" "aws_ctime")
    if [ "${ctime}" ]; then
      ruby_run <<RUBY
      require 'time'
      delta = Time.now - Time.parse('${ctime}')
      print "${node} " if delta % 3600 <= 3180
RUBY
    else
      # unable to find ctime, assume unexhausted
      echo -n "${node} "
    fi
  done
}

aws-shoot-node() {
  local aws_exit_code node instanceid group g gg
  node="$1"
  group="$2"
  instanceid=$(member_get_member_tag "${node}" "aws_instanceid")

  # scale in the capacity
  log "[autoscaler:shoot] Shooting node ${instanceid} in group ${group}"
  set -o pipefail
  "${cw_ROOT}"/opt/aws/bin/aws --region "${cw_INSTANCE_aws_region}" \
  autoscaling terminate-instance-in-auto-scaling-group \
  --instance-id ${instanceid} \
  --should-decrement-desired-capacity 2>&1 | _log_blob "autoscaling:aws"
  aws_exit_code=$?
  set +o pipefail
  return ${aws_exit_code}
}

aws-scale-out() {
  local cores_per_node groups g tmpfile
  local byslot_nodes_req_var bynode_nodes_req_var nodes_req

  groups="$(_list_autoscaling_groups)"
  tmpfile="$(mktemp /tmp/autoscaler.XXXXXXXX)"

  for g in "${groups[@]}"; do
    gg=$(echo $g | sed -e "s/[-\.]/_/g")
    cores_per_node="$(_cores_for_group $g)"
    for scheduler in "${_SCHEDULERS[@]}"; do
      log "[autoscaler:metrics] Retrieving job state data for scheduler ${scheduler} in queues for $g"
      ${scheduler}_parse_job_states "${tmpfile}" "${cores_per_node}" "$g*"
      cat "${tmpfile}" | _log_blob "metrics"
      . "${tmpfile}"

      bynode_nodes_req_var="${scheduler}_queue_${gg}.bynode.q_nodes_req"
      byslot_nodes_req_var="${scheduler}_queue_${gg}.byslot.q_nodes_req"
      nodes_req=$((${nodes_req:-0}+${!byslot_nodes_req_var:-0}+${!bynode_nodes_req_var:-0}))
    done
    log "[autoscaler:metrics] Autoscaling group $g has demand for $nodes_req nodes"
    "${_AWS}" --region "${cw_INSTANCE_aws_region}" \
      autoscaling set-desired-capacity \
      --auto-scaling-group-name $g \
      --desired-capacity $nodes_req
  done
}

_list_autoscaling_groups() {
  local groups
  groups=()
  _gather_groups() {
    while [ "$1" != "--" ]; do shift; done
    groups+=($(member_find_tag "autoscaling_group" "$5"))
  }
  member_each _gather_groups
  groups=($(printf "%s\n" "${groups[@]}" | sort -u | tr '\n' ' '))
  log "[autoscaler:groups] Found groups: ${groups[*]}"
  echo "${groups[*]}"
}

_cores_for_group() {
  local group_cores groups_cores g
  group="$1"

  groups_cores=()
  _gather_group_cores() {
    local group
    while [ "$1" != "--" ]; do shift; done
    group=$(member_find_tag "autoscaling_group" "$5")
    if [ "${group}" ]; then
      groups_cores+=(${group}:$(member_find_tag "autoscaling_group_cores" "$5"))
    fi
  }
  member_each _gather_group_cores
  groups_cores=($(printf "%s\n" "${groups_cores[@]}" | sort -u | tr '\n' ' '))
  log "[autoscaler:cores_for_group] Found cores for groups: ${groups_cores[*]}"

  if [ ${#group_cores[@]} -gt 1 -a -n "${group}" ]; then
    log "[autoscaler:cores_for_group] Looking for group: ${group}"
    for g in "${groups_cores[@]}"; do
      if [[ $g == ${group}:* ]]; then
        group_cores=$(echo "${g}" | cut -f2 -d":")
        log "[autoscaler:cores_for_group] Found group '${group}' has cores: ${group_cores}"
      fi
    done
  else
    group_cores=$(echo "${groups_cores[0]}" | cut -f2 -d":")
    log "[autoscaler:cores_for_group] Selecting first group '${groups_cores[0]}' with cores: ${group_cores}"
  fi

  if [ "${group_cores}" ]; then
    echo "${group_cores}"
  else
    return 1
  fi
}

setup
require files
require member
require ruby

# If the instance-aws file doesn't exist, we're not on AWS so we should error
# (hence the lack of --optional flag)
files_load_config instance-aws config/cluster
