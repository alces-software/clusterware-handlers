#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler support script
## Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_set_job_metrics() {
    # for all known scaling groups, set job metrics
    local dims tmpfile scheduler cores_per_node job_total_var job_total
    local job_queue_var job_queue job_run_var job_run
    local cores_req_var cores_req nodes_req_var nodes_req

    dims="$(autoscaling_collate_group_dimensions)"
    tmpfile="$(mktemp /tmp/autoscaler.XXXXXXXX)"
    cores_per_node="$(autoscaling_cores_for_group)"

    for scheduler in "${_SCHEDULERS[@]}"; do
        log "[autoscaler:metrics] Retrieving job state data for scheduler: ${scheduler}"
        ${scheduler}_parse_job_states "${tmpfile}" "${cores_per_node}"
        cat "${tmpfile}" | _log_blob "metrics"
        . "${tmpfile}"
        job_total_var="${scheduler}_job_total"
        job_total=$((${job_total:-0}+${!job_total_var:-0}))
        job_run_var="${scheduler}_job_run"
        job_run=$((${job_run:-0}+${!job_run_var:-0}))
        job_queue_var="${scheduler}_job_queue"
        job_queue=$((${job_queue:-0}+${!job_queue_var:-0}))
        cores_req_var="${scheduler}_cores_req"
        cores_req=$((${cores_req:-0}+${!cores_req_var:-0}))
        nodes_req_var="${scheduler}_nodes_req"
        nodes_req=$((${nodes_req:-0}+${!nodes_req_var:-0}))
    done

    metrics=()
    metrics+=($("${_JO}" MetricName=JobTotal Value=${job_total:-0} Unit=Count "Dimensions=${dims}"))
    metrics+=($("${_JO}" MetricName=JobRun Value=${job_run:-0} Unit=Count "Dimensions=${dims}"))
    metrics+=($("${_JO}" MetricName=JobQueue Value=${job_queue:-0} Unit=Count "Dimensions=${dims}"))
    metrics+=($("${_JO}" MetricName=CoresReq Value=${cores_req:-0} Unit=Count "Dimensions=${dims}"))
    metrics+=($("${_JO}" MetricName=NodesReq Value=${nodes_req:-0} Unit=Count "Dimensions=${dims}"))
    "${_JO}" -a "${metrics[@]}" > "${tmpfile}"

    # Send: JobTotal, JobRun, JobPending, CoresRequired, NodesRequired
    log "[autoscaler:metrics] Sending metric data to cloudwatch"
    cat "${tmpfile}" | _log_blob "metrics"

    result=$("${_AWS}" --region "${cw_INSTANCE_aws_region}" \
                       cloudwatch put-metric-data \
                       --namespace "ALCES-SCHEDULING" \
                       --metric-data file://${tmpfile} 2>&1)
    if echo "${result}" | grep -q AccessDenied; then
        log "[autoscaler:metrics:aws] Access denied for PutMetricData; disabling."
        mkdir -p "${cw_ROOT}"/var/lib/db/autoscaler
        echo "disabled" > "${cw_ROOT}"/var/lib/db/autoscaler/disable-set_job_metrics
    else
        echo "${result}" | _log_blob "metrics:aws"
    fi

    rm -f "${tmpfile}"
}

_empty_nodes() {
    local scheduler empty_nodes
    empty_nodes=()
    for scheduler in "${_SCHEDULERS[@]}"; do
        empty_nodes+=($(${scheduler}_empty_nodes))
    done
    echo "${empty_nodes[@]}" | tr ' ' '\n' | sort | uniq -d | tr '\n' ' '
}

_log_blob() {
    local prefix
    prefix="$1"
    log_blob "" "autoscaler:${prefix}"
}

_scale_in() {
    # determine which nodes are viable to reap
    # algorithm is:
    #  - nodes that are currently empty
    #  - nodes that are within last 10 minutes of current hour
    #    (i.e. those that may incur additional cost between now and
    #    the next run)
    empty_nodes="$(_empty_nodes)"
    empty_nodes=($(echo "${empty_nodes}" | tr '\n' ' '))
    log "[autoscaler:scale-in] Found empty nodes: ${empty_nodes[*]}"

    # for each empty node, disable the queues while we're deciding
    # whether we're going to shoot them or not.
    for node in "${empty_nodes[@]}"; do
        group=$(member_get_member_tag "${node}" "aws_group")
        if [ "${group}" ]; then
            log "[autoscaler:scale-in] Disabling queues on ${node} (in group: ${group})"
            # disable for each scheduler
            for scheduler in "${_SCHEDULER[@]}"; do
                ${scheduler}_disable_node "${node}"
            done
        fi
    done

    unexhausted_nodes=" $(autoscaling_unexhausted_nodes ${empty_nodes[@]}) "
    for node in "${empty_nodes[@]}"; do
        group=$(member_get_member_tag "${node}" "aws_group")
        if [ "${group}" ]; then
            if [[ "$unexhausted_nodes" == *" $node "* ]]; then
                # this node is not exhausted, reenable the queue
                log "[autoscaler:scale-in] Enabling queues on ${node} (not exhausted)"
                # enable for each scheduler
                for scheduler in "${_SCHEDULER[@]}"; do
                    ${scheduler}_enable_node "${node}"
                done
            else
                log "[autoscaler:scale-in] Attempting to shoot node: ${node}"
                if ! autoscaling_shoot_node "${node}" "${group}"; then
                    log "[autoscaler:scale-in] Unable to shoot node, re-enabling queues"
                    # enable for each scheduler
                    for scheduler in "${_SCHEDULER[@]}"; do
                        ${scheduler}_enable_node "${node}"
                    done
                fi
            fi
        fi
    done
}

_setup_schedulers() {
    local a
    _SCHEDULERS=()
    for a in "${cw_ROOT}"/etc/scheduler/*; do
        if [ -f "$a" ]; then
            _SCHEDULERS+=($(basename "$a"))
            . "${a}"
        fi
    done
    log "[autoscaler:setup_schedulers] Found scheduler(s): ${_SCHEDULERS[*]}"
}

main() {
    if files_load_config --optional instance-aws config/cluster; then
        _setup_schedulers
        if [ ! -f "${cw_ROOT}"/var/lib/db/autoscaler/disable-set_job_metrics ]; then
            log "[autoscaler] Performing job metric scan"
            _set_job_metrics
        else
            log "[autoscaler] Skipping metric scan (currently disabled)"
        fi

        if [ "${cw_INSTANCE_aws_autoscaling}" == "enabled" ]; then
            log "[autoscaler] Performing scale-in check"
            _scale_in
        else
            log "[autoscaler] Autoscaling is disabled"
        fi
    fi
}

setup

require member
require files
require handler
require log

handler_add_libdir
require autoscaling

PATH=$PATH:/sbin

_JO="${cw_ROOT}"/opt/jo/bin/jo
_AWS="${cw_ROOT}"/opt/aws/bin/aws

log_set_default "/var/log/clusterware/autoscaler.log"

main "$@"
