#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}


_get_aws_group_maxsize() {
    local group
    group="$1"
    "${_AWS}" --region "${cw_INSTANCE_aws_region}" \
              autoscaling describe-auto-scaling-groups | \
        "${_JQ}" ".AutoScalingGroups | map(select(.AutoScalingGroupName==\"${group}\")) | .[] | .MaxSize"
}

main() {
    if files_load_config --optional instance-aws config/cluster; then
        eval "$(member_parse)"
        log "Member data parsed: ${cw_MEMBER_name} (${cw_MEMBER_ip}) -- ${cw_MEMBER_tags}"
        scheduler_roles=$(member_find_tag "scheduler_roles" "${cw_MEMBER_tags}")
        if [[ "${scheduler_roles}" == *":compute:"* ]]; then
            aws_group=$(member_find_tag "aws_group" "${cw_MEMBER_tags}")
            if [ "${aws_group}" ]; then

              aws_group_cores=$(member_find_tag "aws_group_cores" "${cw_MEMBER_tags}")
              aws_group_maxsize=$(_get_aws_group_maxsize "${aws_group}")

              log "Triggering local 'autoscaling-member-join' event with: ${cw_MEMBER_name} ${cw_MEMBER_ip} ${aws_group} ${aws_group_maxsize} ${aws_group_cores}"
              "${cw_ROOT}"/libexec/share/trigger-event --local autoscaling-member-join "${cw_MEMBER_name}" "${cw_MEMBER_ip}" "${aws_group}" "${aws_group_maxsize}" "${aws_group_cores}"

              # Bail out if we've already performed the deferred-config event for this group.
              if [ -d "${cw_ROOT}/etc/config/autoscaling/${aws_group}" ]; then
                  exit 0
              fi
              mkdir -p "${cw_ROOT}/etc/config/autoscaling/${aws_group}"

              log "Triggering local 'autoscaling-deferred-config' event with: ${aws_group} ${aws_group_maxsize} ${aws_group_cores}"
              "${cw_ROOT}"/libexec/share/trigger-event --local autoscaling-deferred-config "${aws_group}" "${aws_group_maxsize}" "${aws_group_cores}"
            fi
        fi
    fi
}

setup
require handler
require files
require log
require member

_AWS="${cw_ROOT}"/opt/aws/bin/aws
_JQ="${cw_ROOT}"/opt/jq/bin/jq

log_set_default "/var/log/clusterware/autoscaler.log"

handler_tee main "$@"
