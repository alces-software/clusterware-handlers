#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2015-2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_clear_pulsar_nodes() {
    ruby_run <<EOF
require 'yaml'
config = YAML.load_file('${cw_ROOT}/etc/galaxy/destinations.yml')
config['pulsar']['targets'] = []
File.write('${cw_ROOT}/etc/galaxy/destinations.yml', config.to_yaml)
EOF
    echo '{next_pulsar: 0}' > "${cw_ROOT}"/etc/galaxy/state.yml
}

main() {
    if [ -f "${cw_ROOT}/etc/galaxy/destinations.yml" ]; then
	# Clear out current list of pulsars -- these will be repopulated
	# by member-join events.
	_clear_pulsar_nodes
    fi

    # Bail out if we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/cluster-galaxy" ]; then
        exit 0
    fi

    mkdir -p "${cw_ROOT}"/etc/config/cluster-galaxy

    . "${cw_ROOT}"/etc/config/cluster/instance.rc
    if [[ "${cw_INSTANCE_tag_GALAXY_ROLES}" == *":master:"* ]]; then
        "${cw_ROOT}"/bin/alces service enable galaxy/webapp

	if [ -f "${cw_ROOT}"/etc/cluster-nfs.rc ]; then
            sed -i -e 's,^\(cw_CLUSTER_NFS_exports=".*\)"$,\1 ${cw_ROOT}/var/lib/galaxy/share",g' \
		"${cw_ROOT}"/etc/cluster-nfs.rc
	fi

        if [[ "${cw_INSTANCE_tag_SCHEDULER_ROLES}" == *":master:"* ]]; then
            # set up Galaxy for DRMAA
            sed -i -e 's,<!--plugin id="drmaa_sge,<plugin id="drmaa_sge,g' \
                -e 's,plugin-->,plugin>,g' \
                "${cw_ROOT}"/var/lib/galaxy/config/job_conf.xml
            sed -i -e 's,#export SGE_,export SGE_,g' "${cw_ROOT}"/etc/galaxy/galaxy.rc
            sed -i -e 's,^#DRMAA#,,g' "${cw_ROOT}"/etc/galaxy/destinations.yml
        fi
    fi

    if [[ "${cw_INSTANCE_tag_GALAXY_ROLES}" == *":compute:"* ]]; then
        "${cw_ROOT}"/bin/alces service enable galaxy/pulsar

        files_load_config config config/cluster
        # configure SSL cert for clusterware-galaxy-pulsar
        naming_issue_self_signed_cert "pulsar.${cw_CLUSTER_name:-mycluster}.${cw_CLUSTER_uuid}" \
                                      "Galaxy Pulsar" \
                                      "${cw_ROOT}"/etc/ssl/pulsar
        cat "${cw_ROOT}"/etc/ssl/pulsar/cert.pem \
            "${cw_ROOT}"/etc/ssl/pulsar/key.pem > "${cw_ROOT}"/etc/ssl/clusterware-galaxy-pulsar_crt_and_key.pem

        if [[ "${cw_INSTANCE_tag_SCHEDULER_ROLES}" == *":master:"* ]]; then
            # set up Pulsar for DRMAA
            sed -i -e 's,^#DRMAA#,,g' \
                "${cw_ROOT}"/etc/galaxy/pulsar/app.yml \
                "${cw_ROOT}"/etc/galaxy/pulsar/local_env.sh
            ruby_run <<RUBY
require 'json'
config = JSON.load(File.read('${cw_ROOT}/etc/serf/tags.json'))
config["tags"]["pulsar_managers"] = 'drmaa'
File.write('${cw_ROOT}/etc/serf/tags.json', config.to_json)
RUBY
        fi
    fi
}

setup
require ruby
require handler
require files
require naming

handler_tee main "$@"
