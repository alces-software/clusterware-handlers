#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_setup_serf_joins() {
    local srv_name ip
    srv_name="$1"
    ip="$2"
    dig +short ${srv_name} SRV | (
        ips=""
        while read pri weight port target; do
            if [ "$target" != "$ip" ]; then
                ips="\"$target\",$ips"
            fi
        done
        echo "{\"retry_join\":[${ips%?}]}" > "${cw_ROOT}/etc/serf/join.json"
    )
}

_configure_once() {
    # Bail out now -- we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/clusterable-aws-compat" ]; then
        exit 0
    fi

    mkdir "${cw_ROOT}/etc/config/clusterable-aws-compat"
    ruby_run <<RUBY
require 'yaml'

content = ""
config = YAML.load_file('${cw_ROOT}/etc/config.yml')['cluster']
content << %(AWS_ACCESS_KEY_ID="#{config['aws_access_key']}"\n)
content << %(AWS_SECRET_ACCESS_KEY="#{config['aws_secret_key']}"\n)
File.write("${cw_ROOT}/etc/config/clusterable-aws-compat/aws.rc", content, perm: 0600)
RUBY

    . "${cw_ROOT}/etc/config/clusterable-aws-compat/aws.rc"
    if [ -z "${AWS_ACCESS_KEY_ID}" -o -z "${AWS_SECRET_ACCESS_KEY}" ]; then
        echo "Unable to locate AWS credentials"
        exit 1
    else
        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    fi

    zone_id=$("${_AWS}" route53 list-hosted-zones | \
        "${_JQ}" -r '.HostedZones[] | select(.Name == "cluster.") | .Id')

    if [ -z "${zone_id}" ]; then
        echo "Unable to determine hosted zone"
        exit 1
    else
        echo "Hosted zone detected as: ${zone_id}"
    fi

    hostname="$(hostname -s)"

    change_json=$(cat <<EOF
{
    "HostedZoneId": "${zone_id}",
    "ChangeBatch": {
        "Comment": "Add SRV record for Serf for ${hostname}",
        "Changes": [{ "Action": "UPSERT", "ResourceRecordSet": {
            "Name": "${srv_name}",
            "Type": "SRV", "TTL": 60, "Weight": 0,
            "SetIdentifier": "${hostname}",
            "ResourceRecords": [{"Value": "0 0 7946 ${ip}"}]
        }}]
    }
}
EOF
)
    if ! "${_AWS}" route53 change-resource-record-sets \
        --cli-input-json "${change_json}"; then
        echo "Unable to modify resource record set with JSON:"
        echo "${change_json}"
        exit 1
    fi
}

main() {
    if [ ! -f "${cw_ROOT}/etc/config/cluster/cluster.vars.sh" ]; then
        echo "Unable to locate cluster configuration"
        exit 1
    fi

    . "${cw_ROOT}/etc/config/cluster/cluster.vars.sh"

    srv_name="_serf._tcp.${cw_CLUSTER_name:-${cw_CLUSTER_uuid}}.cluster"
    if [ "${cw_CLUSTER_iface}" ]; then
        ip="$(network_get_device_address ${cw_CLUSTER_iface})"
    else
        ip="$(network_get_public_address)"
    fi

    _setup_serf_joins "${srv_name}" "${ip}"
    _configure_once
}

setup

require handler
require network

_AWS="${cw_ROOT}/opt/aws/bin/aws"
_JQ="${cw_ROOT}/opt/jq/bin/jq"

handler_tee main "$@"
