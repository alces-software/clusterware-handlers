#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2015 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_setup_serf_joins() {
    local srv_name ip wait records
    if [ "$1" == "--wait" ]; then
        wait=true
        shift
    fi
    srv_name="$1"
    ip="$2"

    tmr=0
    tmout=120
    records="$(dig +short ${srv_name} SRV)"
    if [ "$?" -gt 0 ]; then
        records=""
    fi
    while [ -n "${wait}" -a "${tmr}" -lt "${tmout}" -a -z "${records}" ]; do
        sleep 1 </dev/null &>/dev/null &
        wait $!
        tmr=$(($tmr+1))
        records="$(dig +short ${srv_name} SRV)"
    done
    if [ "${tmr}" == "${tmout}" ]; then
        echo "No SRV records found for ${srv_name} after timeout, giving up. :-("
    else
        echo "Processing SRV records: ${records:-(NONE)}"
    fi

    echo "${records}" | (
        ips=""
        while read pri weight port target; do
            # strip trailing '.' character
            target="${target%?}"
            if [ -n "${target}" -a "${target}" != "${ip}" ]; then
                ips="\"${target}\",${ips}"
            fi
        done
        echo "{\"retry_join\":[${ips%?}]}" > "${cw_ROOT}/etc/serf/join.json"
    )
}

_preconfigure_once() {
    # Already preconfigured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/clusterable-aws-compat" ]; then
        return 0
    fi

    mkdir "${cw_ROOT}/etc/config/clusterable-aws-compat"
    ruby_run <<RUBY
require 'yaml'

content = ""
config = YAML.load_file('${cw_ROOT}/etc/config.yml')['cluster']
content << %(AWS_ACCESS_KEY_ID="#{config['aws_access_key']}"\n)
content << %(AWS_SECRET_ACCESS_KEY="#{config['aws_secret_key']}"\n)
if config.key?('aws_zone_name')
  content << %(cw_AWS_zone_name="#{config['aws_zone_name']}"\n)
end
File.write("${cw_ROOT}/etc/config/clusterable-aws-compat/aws.rc", content, perm: 0600)
RUBY
}

_configure_once() {
    # Bail out now -- we're already configured (this is a reboot)
    if [ -f "${cw_ROOT}/etc/config/clusterable-aws-compat/configured" ]; then
        exit 0
    fi

    touch "${cw_ROOT}/etc/config/clusterable-aws-compat/configured"

    if [ -z "${AWS_ACCESS_KEY_ID}" -o -z "${AWS_SECRET_ACCESS_KEY}" ]; then
        echo "Unable to locate AWS credentials"
        exit 1
    else
        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    fi

    zone_id=$("${_AWS}" route53 list-hosted-zones | \
        "${_JQ}" -r ".HostedZones[] | select(.Name == \"${cw_AWS_zone_name:-cluster}.\") | .Id")

    if [ -z "${zone_id}" ]; then
        echo "Unable to determine hosted zone"
        exit 1
    else
        echo "Hosted zone detected as: ${zone_id}"
    fi

    hostname="$(hostname -s)"

    change_json=$(cat <<EOF
{
    "HostedZoneId": "${zone_id}",
    "ChangeBatch": {
        "Comment": "Add SRV record for Serf for ${hostname}",
        "Changes": [{ "Action": "UPSERT", "ResourceRecordSet": {
            "Name": "${srv_name}",
            "Type": "SRV", "TTL": 60, "Weight": 0,
            "SetIdentifier": "${hostname}",
            "ResourceRecords": [{"Value": "0 0 7947 ${ip}"}]
        }}]
    }
}
EOF
)
    if ! "${_AWS}" route53 change-resource-record-sets \
        --cli-input-json "${change_json}"; then
        echo "Unable to modify resource record set with JSON:"
        echo "${change_json}"
        exit 1
    fi
}

main() {
    _preconfigure_once

    files_load_config cluster config/cluster
    files_load_config instance config/cluster
    files_load_config aws config/clusterable-aws-compat

    if [ -n "${cw_AWS_zone_name}" ]; then
	srv_name="_serf._tcp.${cw_CLUSTER_uuid}.${cw_AWS_zone_name}"
	ip="$(network_get_iface_address ${cw_CLUSTER_iface:-$(network_get_first_iface)})"

        # If we're a master instance, then we'll be the first to add a
        # record, otherwise we need to wait until there's at least one
        # record so we can join the cluster!
        if [ "${cw_INSTANCE_role}" != "master" ]; then
            _setup_serf_joins --wait "${srv_name}" "${ip}"
	else
            _setup_serf_joins "${srv_name}" "${ip}"
	fi

	_configure_once
    fi
}

setup

require handler
require network
require files

_AWS="${cw_ROOT}/opt/aws/bin/aws"
_JQ="${cw_ROOT}/opt/jq/bin/jq"

handler_tee main "$@"
