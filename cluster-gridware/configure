#!/bin/bash
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

main() {
    local depots urlvar a source target

    # Bail out if we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/gridware" ]; then
        exit 0
    fi

    mkdir -p "${cw_ROOT}/etc/config/gridware"

    ruby_run <<RUBY
require 'yaml'

def write_file(name, content)
  File.write("${cw_ROOT}/etc/config/gridware/#{name}",content)
end

config = YAML.load_file('${cw_ROOT}/etc/config.yml')['cluster']['gridware'] || {}

gridware_vars = []
if config['depots']
  depot_names = []
  disabled_depot_names = []
  config['depots'].each do |d|
    depot_names << d['name']
    disabled_depot_names << d['name'] if d['disabled']
    if d['url']
      gridware_vars << "cw_GRIDWARE_depot_url_#{d['name']}=\"#{d['url']}\""
    end
  end
  gridware_vars << ('cw_GRIDWARE_depots="' << depot_names.join(' ') << '"')
  gridware_vars << ('cw_GRIDWARE_depots_disabled=":' << disabled_depot_names.join(':') << ':"')
end
write_file('gridware.rc', gridware_vars.join("\n"))
RUBY

    files_load_config instance config/cluster
    if [ "${cw_INSTANCE_role}" == "master" ]; then
	files_load_config gridware config/gridware
	files_load_config gridware
        depots="local"
        for a in $depots; do
            if [ -L "/opt/gridware/${a}" ]; then
                source="$(readlink /opt/gridware/${a})"
                target="/opt/gridware/depots/$(uuid -v4 | cut -f1 -d'-')"
                mv "${source}" "${target}"
                ln -snf "${target}" /opt/gridware/${a}
            fi
        done

	cat <<EOF > "${cw_ROOT}"/etc/cluster-nfs.d/cluster-gridware.rc
################################################################################
##
## Alces Clusterware - Shell configuration
## Copyright (c) 2008-2015 Alces Software Ltd
##
################################################################################
if [ -d "${cw_GRIDWARE_root:-/opt/gridware}" ]; then
    for a in ${cw_GRIDWARE_root:-/opt/gridware}/*; do
        if [ -L "\$a" ]; then
            cw_CLUSTER_NFS_exports="\${cw_CLUSTER_NFS_exports} \$(readlink \$a)"
        fi
    done
    cw_CLUSTER_NFS_exports="\${cw_CLUSTER_NFS_exports} ${cw_GRIDWARE_root:-/opt/gridware}/etc"
fi
EOF

        export HOME=${HOME:-/tmp}
	files_load_config distro
        for a in ${cw_GRIDWARE_depots}; do
            urlvar="cw_GRIDWARE_depot_url_${a}"
            if [ "${!urlvar}" ]; then
                "${cw_ROOT}"/bin/alces gridware depot fetch "${!urlvar}" "${a}"
            fi
            if [[ "${cw_GRIDWARE_depots_disabled}" == *":${a}:"* ]]; then
                "${cw_ROOT}"/bin/alces gridware depot disable $a
            else
                "${cw_ROOT}"/bin/alces gridware depot enable $a
            fi
        done
    fi
}

setup
require handler
require files

handler_tee main "$@"
